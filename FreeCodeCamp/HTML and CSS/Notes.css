/*
Selectors:
- for 'main parts': just body {}; footer {}; img {}; a {}; etc
- for links, we can have multiple options: a:visited {}; a:hover {}; a:active {}
- for classes: we need to add an '.' before
- we can select multiple ones by dividing with a comma ',' (example h1, h2 {})
- also, we can have a class like 'market red' and target both individually: .market {}; .red {} (for example)
- for id's we do it with # (like the . in classes)

html{
    box-sizing= to border-box;
}
Browsers can apply default margin and padding values to specific elements. To make sure your piano looks correct,
you need to reset the box model and that's what this piece of code is for.
   - *, *::before, *::after {
        box-sizing: inherit;
    }
    - besides the html, we need to pass the property to the "children" elements (*) and to all the pseudo-elements 
    we might add later (::before and ::after)

content
The content property is used to set or override the content of the element. By default, the pseudo-elements created
by the ::before and ::after pseudo-selectors are empty, and the elements will not be rendered to the page. Setting 
the content property to an empty string "" will ensure the element is rendered to the page while still being empty.

@media () {}
The @media at-rule, also known as a media query, is used to conditionally apply CSS. Media queries are commonly used
 to apply CSS based on the viewport width using the max-width and min-width properties.

overflow: hidden;
Hides any elements that overflow when the size of the window gets too small.

Color Schemes: 
    - rgb(x, y, z): takes 3 arguments for primary colors (red, green and blue) from 0-255. All 255's makes white and all 0's makes black.
    - #xxyyzz: same as above, but instead of 0-255 it takes arguments from 0-F (0-9 and A-F). And it's 2 arguments per color instead of
    1. Exampple for red: #FF0000 (if they're the same we can simplify and do #F00 - but it's always either 3 or 6 arguments). Sike, 
    it can be 3, 6 or 8 (with the alpha channel ones).
    - hsl (x, y%, z%): this one is a bit different. It takes a hue (color/shade, goes from 0-260, based on the color wheel. Red is 0,
    green is 120 and blue is 240); saturation (intensity of the color and goes from 0-100%, 0% being gray and 100% pure color); lightness
    (how bright a color appears, from 0%, or complete black, to 100%, complete white, with 50% being neutral). In the last 2, we really
    need to add the % sign. 

    - linear-gradient: applied to the background as it creates a image element and the background supports that. This fc takes at least 3 
    arguments - gradientdirection (90deg for example); color1 (can be in either of the forms above); color2 (same as color1). Can also
    add the % we want each color to represent by adding the wanted % right after the color (these are called color-stops).
    We can remove the color-stops and the gradDirection if we're ok with the defaults to have a cleaner code.

    - opacity (from 0-1 or 0%-100%). Can do the same with alpha channel: rgba - works the same as rgb but takes an extra argument for the
    alpha channel (from 0-1)

    - box-shadow: lets you apply one or more shadows around an element. Here is basic syntax: offsetX offsetY color, oofsetx/y moves the 
    shadow to the left/right (x) or up/down (y) and takes values in px (can be positive or negative). If we want 0, don't need to add the 
    unit (px in this case). Negative values are for up and left, positive ones for right and down. 
    Additionally, we can define the blurRadius between the offseets and color (if we don't, it's 0 by default) and it defines the 
    sharpness of the edges. 
    AND we can define how far it is with spreadRadius (once again it's ' by default and comes after the blurRadius).

Position:
Typically, HTML is rendered in a top-down manner. Elements at the top of the code are positioned at the top of the page. However, many 
times you may want to move the elements to different positions. You can do this with the position property.
    - absolute: this position takes the element out of that top-down document flow and allows you to adjust it relative to its container.
    When we have this position, the top/left/right/bottom are more flexible to move the items around.

:root
If we declare var's in another section, even if it's a parent, those will not be usable in the whole doc, so we should declare them in a 
root, as this is the highest level selector in CSS; putting your variables there will make them usable everywhere.

z-index
Is used to create "layers" for your HTML elements. Elements with a higher z-index value will appear to be layered on top of elements with
a lower z-index value. This can be combined with the positioning to create unique effects.

Other configurations: 
    - width
    - height (unit for viewport is vh; can also use the 'normal' px)
    - padding
    - margin (left, right, top, bottom or just margin). Can prevent horizontal scroll in the 'body' element (margin: 0;)
    - max-width
    - text-align
    - font-style
    - font-size
    - font-family
    - color 
    - background
    - background-color
    - background-image
    - display
    - border (left, right, width, color, style)
    - border-radius (in px and ir rounds the corners)
    - object-fit
    - Flexbox
        - set by doing: 'display: flex'
        - flex-direction
        - flex-wrap - this makes the items in the parent element fit inside it, not 'overflowing'
        - justify-content
    - align-items
    - gap
    - :first-of-type
    - :last-of-type
    - ::before
    - ::after
    - --variable-name (ex. --building-color (from CitySkyline))
        - to use it: ex: background-color: var(--variable-name)

Units: 
    - rem: used for sizing relative to the font size of the root element (<html>), for scalable and consistent layouts  across the entire 
    page (margins, paddings, and general layout elements). Use it for global sizing that should be consistent throughout the page.
    - em: used for sizing relative to the font size of the parent or current element. Useful when you want an element's size to scale 
    proportionally with its parent element or when creating scalable typography. Consider using em for elements like headings, text blocks, 
    and UI components that should adapt to the font size of their container.
    - px: better used for fixed and precise sizing, such as borders, shadows, and certain UI elements. Ideal for elements that need to 
    maintain a specific size regardless of the user's preferred font size or zoom level. Not responsive or scalable with changes in font 
    size or layout.

Little helps:
- https://cdn.freecodecamp.org/curriculum/css-box-model/diagram-3.png - for the css box model (understanding padding, border, margin)
- to center elements: margin: 0 auto;
- the elements have a default margin, so might want to remove it (margin: 0;).
- To fill the whole page, do 100vh (for height for example: height: 100vh) - vh meaning that we are targeting to the viewport 
- every element is set within it's 'parent'. Meaning: 
        <body>
            <div class="background-buildings"></div>
        </body>
    If we set .background-buildings to width: 100%; for example, it's 100% of the parent, so the body.
- to center stuff, turn the parent into a flexbox (display: flex;) and then use the properties of 'flex-direction' and 'align-items'
*/