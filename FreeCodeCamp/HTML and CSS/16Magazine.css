*, ::before, ::after {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

html {
    font-size: 62.5%; /*This sets the default font size for your web page to 10px (the browser default is 16px). This will make it easier to work with rem units later, as 2rem would be 20px.*/
}

body {
    font-family: 'Baskervville', serif;
    color: linen; 
    background-color: rgb(20, 30, 40);
}

h1 {
    font-family: 'Anton', sans-serif;
}

h2, h3, h4, h5, h6 {
    font-family: 'Raleway', sans-serif;
}

a {
    text-decoration: none;
    color: linen;
}

/*Grid layout
CSS Grid offers a two-dimensional grid-based layout, allowing to center items horizontally and vertically while still retaining control to do things like overlap elements.*/
main { 
    display: grid;  /*this sets the main as the parent element*/
    grid-template-columns: minmax(2rem, 1fr) minmax(min-content,94rem) minmax(2rem,1fr); /*This creates 3 columns where the middle column is 94rem wide, and the first and last columns are both 1 fraction of the remaining space in the grid container.*/
    row-gap: 3rem;
}

.heading {
    display: grid;
    grid-column: 2/3; /*This will tell the .heading element to start at grid line 2 and end at grid line 3.*/
    grid-template-columns: repeat(2, 1fr); /*repeat() is used to repeat a value, rather than writing it out manually, and is helpful for grid layouts. For example, setting the grid-template-columns property to repeat(20, 200px) would create 20 columns each 200px wide.*/
    row-gap: 1.5rem;
}

.text {
    grid-column: 2/3;
    font-size: 1.8rem;
    letter-spacing: 0.6px;
    column-width: 25rem;
    text-align: justify; /*for pinting this is the setting usually used, in order to structure the layout and control the flow of the content. However, it can be a problem for accessibility, specially for people with dyslexia*/
}

.hero {
    grid-column: 1/-1; /*when we don't know the number of columns and want it to go to the last one, use -1*/
    position: relative;
}

img {
    width: 100%;
    object-fit: cover; /*tells the browser how to position the element within its container. In this case, cover will set the image to fill the container, cropping as needed to avoid changing the aspect ratio.*/
}

.hero-title {
    text-align: center;
    color: orangered;
    font-size: 8rem;
}

.hero-subtitle {
    text-align: center;
    color: orangered;
    font-size: 2.4rem;
}

.author {
    font-size: 2rem;
    font-family: 'Raleway', sans-serif;
}

.author-name a:hover {
    background-color: #306203;
}

.publish-date {
    color: rgba(255, 255, 255, 0.5);
}

.social-icons {
    display: grid;
    font-size: 3rem;
    grid-template-columns: repeat(5, 1fr); /*The default settings for CSS Grid will create additional rows as needed, unlike Flexbox. So we can set grid-template-columns property to repeat(5, 1fr) to arrange the icons in a single row.*/
    grid-auto-flow: column; /*If we want to add more social icons, but keep them on the same row, you'd need to update grid-template-columns to create additional columns. As an alternative, we can use this property. See more in the css notes*/
    grid-auto-columns: 1fr; /*the above adds columns at the pre-set width, to overide it, we can use this property*/ 
    align-items: center;
}

.first-paragraph::first-letter {
    font-size: 6rem;
    color: orangered;
    float: left; 
    margin-right: 1rem; /*this and the prev lines are to shift the S into place, as the text was moved*/
}

hr { /*these are the lines*/
    margin: 1.5rem 0; /*sets the distance from the content/text to the lines*/
    border: 1px solid rgba(120, 120, 120, 0.6); /*colors the lines*/
}

.quote {
    color: #00beef;
    font-size: 2.4rem;
    text-align: center;
    font-family: 'Raleway', sans-serif;
}

.quote::before {
    content: '" ';
}

.quote::after {
    content: ' "';
}

.text-with-images {
    display: grid;
    grid-template-columns: 1fr 2fr; 
    column-gap: 3rem;
    margin-bottom: 3rem;
}

.lists {
    list-style-type: none; /*removes the bullet points from the list items*/
    margin-top: 2rem;
}

.lists li {
    margin-bottom: 1.5rem;
}

.list-title, .list-subtitle {
    color: #00beef;
}

.image-wrapper {
    display: grid;
    grid-template-columns: 2fr 1fr; /*creates 2 columns, with fixed width based on the container*/
    grid-template-rows: repeat(3, min-content); /*creates 3 rows, that adjust height based on content*/
    gap: 2rem; /*distance between the grid elements*/
    place-items: center;
}

.image-1, .image-3 {
    grid-column: 1 / -1;
}

@media  only screen and (max-width: 720px) { /* look into this*/
    .image-wrapper {
        grid-template-columns: 1fr;
    }
}
/*This collapses the 3 images into one column on smaller screens.*/

@media  only screen and (max-width: 600px) { /* look into this*/
    .text-with-images {
        grid-template-columns: 1fr;
    }
}
/*This collapses the bottom text area into a single column on smaller screens.*/

@media  only screen and (max-width: 550px) { /* look into this*/
    .hero-title {
        font-size: 6rem;
    }
    .hero-subtitle, .author, .quote, .list-title {
        font-size: 1.8rem;
    }
    .social-icons {
        font-size: 2rem;
    }
    .text {
        font-size: 1.6rem;
    }
}

@media  only screen and (max-width: 420px) { /* look into this*/
    .hero-title {
        font-size: 4.5rem;
    }
}
/**/